openapi: 3.0.3
info:
  title: Language Exchange Matchmaking API
  description: |
    Backend API for a language exchange application that provides matchmaking services to connect users for audio chats based on their native and practice languages.
    
    ## Features
    - Real-time matchmaking queue
    - WebSocket notifications
    - Queue status monitoring
    - Request cancellation
    
    ## Architecture
    - **Database**: PostgreSQL (user data, chat sessions)
    - **Cache/Queue**: Redis (matchmaking queue, real-time data)
    - **Background Jobs**: Asynq (Redis-backed job processing)
    - **WebSockets**: Real-time notifications
  version: 1.0.0
  contact:
    name: Language Exchange API
servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health Check
      description: Check if the service is running
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  service:
                    type: string
                    example: "langapp-backend"

  /api/v1/match/request:
    post:
      tags:
        - Matchmaking
      summary: Request Match
      description: Submit a request to join the matchmaking queue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchRequestBody'
            examples:
              english_to_spanish:
                summary: English speaker learning Spanish
                value:
                  user_id: "550e8400-e29b-41d4-a716-446655440001"
                  native_languages: ["english"]
                  practice_language: "spanish"
              multilingual:
                summary: Multilingual speaker
                value:
                  user_id: "550e8400-e29b-41d4-a716-446655440001"
                  native_languages: ["english", "spanish"]
                  practice_language: "french"
      responses:
        '200':
          description: Successfully added to matchmaking queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_uuid:
                  summary: Invalid UUID format
                  value:
                    error: "validation_error"
                    message: "Invalid user ID format"
                missing_fields:
                  summary: Missing required fields
                  value:
                    error: "validation_error"
                    message: "Missing required fields: practice_language"
        '409':
          description: Conflict - user already in queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "already_in_queue"
                message: "User already has an active match request for this language"

  /api/v1/match/cancel/{userID}:
    delete:
      tags:
        - Matchmaking
      summary: Cancel Match Request
      description: Cancel a pending match request
      parameters:
        - name: userID
          in: path
          required: true
          description: UUID of the user
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440001"
        - name: practice_language
          in: query
          required: true
          description: The language the user was practicing
          schema:
            type: string
            example: "french"
      responses:
        '200':
          description: Match request cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "cancelled"
                  message:
                    type: string
                    example: "Match request cancelled successfully"
        '404':
          description: Match request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "request_not_found"
                message: "No active match request found for this user and language"

  /api/v1/queue/status/{userID}:
    get:
      tags:
        - Queue
      summary: Get Queue Status
      description: Get current queue status for all languages
      parameters:
        - name: userID
          in: path
          required: true
          description: UUID of the user
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440001"
      responses:
        '200':
          description: Current queue status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueStatusResponse'

  /ws/match/{userID}:
    get:
      tags:
        - WebSocket
      summary: Match Notifications WebSocket
      description: |
        WebSocket endpoint for real-time match notifications and session management.
        
        **Connection**: `ws://localhost:8080/ws/match/{userID}`
        
        **Client Messages**:
        - `{"type": "ping"}` - Heartbeat message
        - `{"type": "queue_status"}` - Request queue status
        
        **Server Messages**:
        - `{"type": "pong", "timestamp": "..."}` - Heartbeat response
        - `{"type": "match_found", "data": {...}}` - Match notification
        - `{"type": "queue_status_response", "data": {...}}` - Queue status response
      parameters:
        - name: userID
          in: path
          required: true
          description: UUID of the user
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440001"
      responses:
        '101':
          description: WebSocket connection established
        '400':
          description: Bad request - invalid user ID

components:
  schemas:
    MatchRequestBody:
      type: object
      required:
        - user_id
        - native_languages
        - practice_language
      properties:
        user_id:
          type: string
          format: uuid
          description: UUID of the user requesting a match
          example: "550e8400-e29b-41d4-a716-446655440001"
        native_languages:
          type: array
          items:
            type: string
          description: List of languages the user speaks natively
          example: ["english", "spanish"]
          minItems: 1
        practice_language:
          type: string
          description: Language the user wants to practice
          example: "french"

    MatchResponse:
      type: object
      properties:
        request_id:
          type: string
          format: uuid
          description: Unique identifier for the match request
          example: "123e4567-e89b-12d3-a456-426614174000"
        status:
          type: string
          enum: [pending, matched, cancelled, expired]
          description: Current status of the match request
          example: "pending"
        expires_at:
          type: string
          format: date-time
          description: When the match request expires
          example: "2025-07-13T15:35:00Z"
        message:
          type: string
          description: Human-readable message about the request
          example: "Added to matchmaking queue. You will be notified when a match is found."

    QueueStatusResponse:
      type: object
      properties:
        queue_status:
          type: object
          description: Number of users waiting in queue for each language
          additionalProperties:
            type: integer
          example:
            english: 5
            spanish: 3
            french: 8
            german: 2
            japanese: 12
        timestamp:
          type: string
          format: date-time
          description: When the status was generated
          example: "2025-07-13T15:30:00Z"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error type identifier
          example: "validation_error"
        message:
          type: string
          description: Human-readable error message
          example: "Invalid user ID format"

    WebSocketMessage:
      type: object
      properties:
        type:
          type: string
          description: Message type
          enum: [ping, pong, queue_status, queue_status_response, match_found]
        data:
          type: object
          description: Message payload (varies by type)
        timestamp:
          type: string
          format: date-time
          description: Message timestamp
          example: "2025-07-13T15:30:00Z"

    MatchFoundData:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
          description: UUID of the created chat session
          example: "789e4567-e89b-12d3-a456-426614174000"
        message:
          type: string
          description: Match notification message
          example: "Match found! You have 30 seconds to accept."

tags:
  - name: Health
    description: Service health endpoints
  - name: Matchmaking
    description: Matchmaking queue operations
  - name: Queue
    description: Queue monitoring and status
  - name: WebSocket
    description: Real-time WebSocket connections